name: Build, Test and Push Docker image

on:
  push:
    branches: [ main ]

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create test network
        run: docker network create test-net

      - name: Start SQL Server
        run: |
          docker run -d --name sqlserver-test \
            --network test-net \
            -e SA_PASSWORD=Admin123! \
            -e ACCEPT_EULA=Y \
            -e SQLSERVER_DATABASE=AppCustomerDiiageDbe \
            -e SQLSERVER_USER=sa \
            -e SQLSERVER_PASSWORD=Admin123! \
            exoplatform/sqlserver:latest

      - name: Wait for SQL Server to be ready
        run: |
          for i in {1..30}; do
            if docker logs sqlserver-test 2>&1 | grep -q "SQL Server is now ready"; then
              echo "SQL Server is up!"
              break
            fi
            echo "Waiting for SQL Server..."
            sleep 2
          done

      - name: Build Docker image
        run: docker build -t docker.io/ttmartinksdocket/tp3-web:latest .

      - name: Test Docker image
        run: |
          docker run --rm \
            --network test-net \
            -e ConnectionStrings__DefaultConnection="Server=sqlserver-test,1433;Database=AppCustomerDiiageDbe;User=sa;Password=Admin123!;TrustServerCertificate=True;" \
            docker.io/ttmartinksdocket/tp3-web:latest dotnet --info

      - name: Login to Docker Hub
        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login docker.io -u "${{ secrets.REGISTRY_USER }}" --password-stdin

      - name: Push Docker image
        run: docker push docker.io/ttmartinksdocket/tp3-web:latest

      - name: Cleanup SQL Server
        if: always()
        run: docker rm -f sqlserver-test || true
